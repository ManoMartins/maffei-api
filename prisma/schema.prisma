// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum StoreProductStatus {
  ENABLED
  DISABLED
}

model User {
  id              String    @id @default(uuid())
  name            String
  email           String    @unique
  password        String
  documentNumber  String
  gender          String
  ranking         Int?      @default(0)
  phoneNumber     String
  phoneNumberType String
  birthDate       DateTime
  addresses       Address[]
  role            Role      @default(USER)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @default(now())
}

model Address {
  id           String   @id @default(uuid())
  street       String
  streetType   String
  number       String
  complement   String?
  neighborhood String
  zipCode      String
  city         City     @relation(fields: [cityId], references: [id])
  cityId       String
  state        State    @relation(fields: [stateId], references: [id])
  stateId      String
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now())
}

model State {
  id        String    @id @default(uuid())
  fullName  String
  initials  String    @unique()
  cities    City[]
  addresses Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model City {
  id            String    @id @default(uuid())
  name          String
  state         State     @relation(fields: [stateInitials], references: [initials])
  stateInitials String
  addresses     Address[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now())
}

model StoreProduct {
  id          String                @id @default(uuid())
  name        String
  status      StoreProductStatus    @default(DISABLED)
  releaseDate DateTime
  summary     String
  storyline   String
  slug        String
  stock       Int
  price       Float
  genres      ProductsOnGenres[]
  platforms   ProductsOnPlatforms[]
  companies   InvolvedCompanies[]
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @default(now())
}

model Company {
  id          String              @id @default(uuid())
  name        String
  slug        String
  description String
  products    InvolvedCompanies[]
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @default(now())
}

model InvolvedCompanies {
  company     Company      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  companyId   String
  product     StoreProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId   String
  isDeveloper Boolean
  isPublisher Boolean
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @default(now())

  @@id([companyId, productId])
}

model Platform {
  id           String                @id @default(uuid())
  name         String
  slug         String
  generation   String?
  abbreviation String
  summary      String
  products     ProductsOnPlatforms[]
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @default(now())
}

model ProductsOnPlatforms {
  platform   Platform     @relation(fields: [platformId], references: [id], onDelete: Cascade)
  platformId String
  product    StoreProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())

  @@id([platformId, productId])
}

model Genre {
  id        String             @id @default(uuid())
  name      String
  slug      String
  products  ProductsOnGenres[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @default(now())
}

model ProductsOnGenres {
  product   StoreProduct @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String
  genre     Genre        @relation(fields: [genreId], references: [id], onDelete: Cascade)
  genreId   String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @default(now())

  @@id([genreId, productId])
}
